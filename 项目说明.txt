在GitHub上创建一个新的仓库:
github创建完项目:
https://github.com/mathes821024/fastapi_project.git

初始化仓库: 使用git init初始化一个新的Git仓库。
添加文件: 使用git add .将当前目录下的所有文件和文件夹添加到Git跟踪中。
提交: 使用git commit -m "first commit"进行第一次提交。
查看分支: git branch会列出所有的本地分支。默认情况下，新的Git仓库会有一个名为master的分支。
重命名分支: 使用git branch -M main将master分支重命名为main。注意，从2020年10月1日起，GitHub创建的新仓库默认分支名称从master更改为main，但本地Git初始化的仓库默认分支名称仍然是master。
添加远程仓库: 使用git remote add origin https://github.com/mathes821024/fastapi_project.git将GitHub仓库添加为远程仓库。
推送: 使用git push -u origin main将本地的main分支推送到远程仓库。
这些步骤应该可以成功地将您的本地仓库推送到GitHub。如果您在执行这些步骤时遇到任何问题，请告诉我，我会帮助您解决。



or create a new repository on the command line
echo "# fastapi_project" >> README.md
git init
git add .
git commit -m "first commit"
git branch
git branch -M main
git remote add origin https://github.com/mathes821024/fastapi_project.git
git push -u origin main

您遇到的 "Recv failure: Connection was reset" 错误可能是由于多种原因引起的。以下是一些建议的解决方法
移除现有的远程连接:
git remote remove origin
重新添加远程连接:
git remote add origin git@github.com:mathes821024/fastapi_project.git
尝试再次推送:
git push -u origin main

Administrator@MS-HVVDSSNLSPHW MINGW64 /e/git_src/python-project/fastapi_project (main)
$ git remote remove origin

Administrator@MS-HVVDSSNLSPHW MINGW64 /e/git_src/python-project/fastapi_project (main)
$ git remote add origin git@github.com:mathes821024/fastapi_project.git

Administrator@MS-HVVDSSNLSPHW MINGW64 /e/git_src/python-project/fastapi_project (main)
$ git push -u origin main
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

解决公钥错误问题:
$ git push -u origin main
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.


检查现有的 SSH 密钥:
ls ~/.ssh
生成 SSH 密钥 (仅在没有现有密钥时执行)
ssh-keygen -t rsa -b 4096 -C "mathes821024@gmail.com"

使用鼠标选择并复制公钥。

在 GitHub 上添加您的公钥:

打开 GitHub 并登录。
点击右上角的头像，选择 "Settings"。
在左侧选择 "SSH and GPG keys"。
点击 "New SSH key"，粘贴您的公钥，然后保存。
测试您的 SSH 连接:



关于您的问题：您只需要为每台机器的每个 GitHub 账户添加一次 SSH 公钥。一旦您的 SSH 公钥被添加到 GitHub 账户，您就可以使用该密钥从该机器访问任何您有权限的 GitHub 仓库，无需为每个项目重复此操作。

简而言之：

如果您在同一台机器上使用相同的 GitHub 账户，您只需要添加一次 SSH 公钥。
如果您在不同的机器上使用相同的 GitHub 账户，您需要为每台机器添加 SSH 公钥。
如果您在同一台机器上使用不同的 GitHub 账户，通常建议为每个账户生成不同的 SSH 密钥对，并在 ~/.ssh/config 文件中进行适当的配置。
但在大多数常见的使用情况下，对于同一台机器和同一个 GitHub 账户，您只需要设置一次 SSH 密钥。








…or push an existing repository from the command line
git remote add origin https://github.com/mathes821024/fastapi_project.git
git branch -M main
git push -u origin main


conda create -n env_Fastapi python==3.8.12
mkdir fastapi_project

fastapi_project/
│
├── app/                         # 主应用目录
│   ├── api/                     # API路由和端点
│   │   ├── endpoints/           # 各个API端点
│   │   │   ├── notification.py  # 与Java管理平台通信的API
│   │   │   └── report.py        # 生成报表并发送到文件服务器的API
│   │   └── api.py               # 聚合所有API路由
│   │
│   ├── core/                    # 核心组件（如配置管理）
│   │   └── config.py            # 项目配置文件
│   │
│   ├── services/                # 各种服务类
│   │   ├── zeromq_service.py    # 与核心C服务进行ZeroMQ通信的服务
│   │   ├── ftp_service.py       # FTP服务
│   │   ├── oracle_service.py    # Oracle数据库服务
│   │   └── excel_service.py     # Excel文件生成服务
│   │
│   ├── models/                  # 数据模型和schemas
│   │   ├── oracle_models.py     # Oracle数据模型
│   │   └── api_models.py        # API请求/响应数据模型
│   │
│   ├── main.py                  # FastAPI应用的主入口
│   └── ...
│
├── tests/                       # 测试目录
│   ├── test_api.py
│   ├── test_services.py
│   └── ...
│
├── requirements.txt             # 项目依赖
└── README.md

以下是如何根据上述结构进行开发：

app/main.py: 在这里，您会初始化FastAPI应用并包含所有的API路由。
app/api/api.py: 在这里，您会聚合所有API路由。
app/api/endpoints/: 每个文件代表一个API的子路由。例如，notification.py可以处理与Java管理平台相关的所有API请求。
app/core/config.py: 定义所有的配置变量，如数据库URI、FTP服务器信息等。
app/services/: 这里存放所有的服务类。例如，zeromq_service.py可以包含与核心C服务通信的相关方法。
app/models/: 定义所有的数据模型。oracle_models.py可以定义与Oracle数据库表相对应的Pydantic模型，而api_models.py可以定义API请求和响应的模型。
tests/: 包含所有的单元测试和集成测试。


FastAPI 项目
本项目主要包含两个组件：

FastAPI 推送服务：该服务通过ZeroMQ监听核心C服务的消息，并通过HTTP/HTTPS通知Java管理平台。
FastAPI 对账文件推送服务：该服务监听来自核心C服务通过ZeroMQ发送的消息，根据收到的消息查询Oracle 11g数据库，生成Excel报告，并通过FTP将其发送到内部文件服务器。
目录
前置条件
安装
使用方法
测试
参与贡献
许可证
前置条件
Python 3.8.12 或更高版本
Oracle 11g客户端（如果需要连接到Oracle数据库）
ZeroMQ配置（用于与核心C服务通信）

安装
克隆仓库：
git clone <仓库地址>
cd fastapi_project

创建虚拟环境并激活：
python -m venv venv
source venv/bin/activate  # 在Windows上使用：venv\Scripts\activate

安装依赖项：
pip install -r requirements.txt

根据需要配置环境变量或更新app/core/config.py。
使用方法
运行FastAPI应用程序：
uvicorn app.main:app --reload
测试
关于如何运行测试套件的详细信息。

参与贡献
参与本项目贡献的步骤或指南。

许可证
关于项目许可证的信息。

